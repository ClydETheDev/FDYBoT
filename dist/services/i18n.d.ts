import { AllKeysOf, KeyOfUnion } from "../core/Utils";
export declare let langs: {
    en: {
        "bot.info.name": string;
        "bot.info.cute": string;
        "command.run.cooldown": string;
        "command.run.error": string;
        "command.run.notfound": string;
        "command.run.invaild": string;
        "basic.say.description": string;
        "basic.say.usage": string;
        "basic.say.error.invaildparams": string;
        "basic.say.error.noargs": string;
        "basic.toggle.description": string;
        "basic.toggle.usage": string;
        "basic.toggle.command.toggled": string;
        "basic.toggle.command.enabledText": string;
        "basic.toggle.command.disabledText": string;
        "basic.ping.pong": string;
        "basic.lang.current": string;
        "basic.lang.set": string;
        "currency.format.result": string;
        "currency.format.subjectNotFound": string;
        "currency.format.subjectNotFoundOrUsable": string;
        "currency.format.subjectDontHave": string;
        "currency.fish.noRod": string;
        "currency.equip.conflict": string;
        "currency.unequip.conflict": string;
        "item.cod": string;
        "item.fish": string;
        "item.salmon": string;
        "item.squid": string;
        "item.bundle": string;
        "item.fishing_rod": string;
    };
    zh: {
        "command.run.cooldown": string;
        "command.run.error": string;
        "command.run.notfound": string;
        "basic.say.description": string;
        "basic.say.usage": string;
        "basic.say.error.invaildparams": string;
        "basic.say.error.noargs": string;
        "basic.toggle.description": string;
        "basic.toggle.usage": string;
        "basic.toggle.command.toggled": string;
        "basic.toggle.command.enabledText": string;
        "basic.toggle.command.disabledText": string;
        "basic.ping.pong": string;
        "basic.lang.current": string;
        "basic.lang.set": string;
        "item.fish": string;
        "item.bundle": string;
    };
    tw: {
        "command.run.cooldown": string;
        "command.run.error": string;
        "command.run.notfound": string;
        "basic.say.description": string;
        "basic.say.usage": string;
        "basic.say.error.invaildparams": string;
        "basic.say.error.noargs": string;
        "basic.toggle.description": string;
        "basic.toggle.usage": string;
        "basic.toggle.command.toggled": string;
        "basic.toggle.command.enabledText": string;
        "basic.toggle.command.disabledText": string;
        "basic.ping.pong": string;
        "basic.lang.current": string;
        "basic.lang.set": string;
        "currency.format.result": string;
        "currency.format.subjectNotFound": string;
        "currency.format.subjectNotFoundOrUsable": string;
        "currency.format.subjectDontHave": string;
        "currency.fish.noRod": string;
        "item.cod": string;
        "item.fish": string;
        "item.salmon": string;
        "item.squid": string;
        "item.bundle": string;
        "item.fishing_rod": string;
    };
};
export declare const langAlias: {
    en: string[];
    zh: string[];
    tw: string[];
};
export type langKeys = Exclude<AllKeysOf<KeyOfUnion<typeof langs>>, `item.${string}` | `//${string}`> | `-${string}`;
export type langTypes = keyof typeof langs;
export declare let globes: {
    color: string;
};
